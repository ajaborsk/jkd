Idées en vrac

Exemples d'applications
 - Analyse immobilisations
 - Indicateurs suivi Asset+
 - Analyse activité EFS
 - Compilation (test)
  Par exemple pour un script Arduino

Une application est un fichier (xml ?) qui décrit le graphe (noeuds et arcs).

Types de noeuds :
 - Source de données (brutes)
     - Base de données
     - Fichier(s) Excel
     - h5
     - fichier brut/binaire (.o .h .c .elf ...)
 - Caches
 - Transformateurs de données (import / export)
 - Table
 - Rapport (pdf/html/dhtml/svg...)


Tests à prévoir :
- Tous les Nodes doivent être sérialisables

Pour le serveur WEB, typologie des adresses :
  /application/node/subnode/subsubnode/port.[html/xls/pdf/csv/svg]

Un rapport peut être :
  Offline (contient toutes les données) ou Online (va chercher des données dynamiquement)
  Static (figé et donc Offline) ou Dynamic (Online or Offline)
  Le type est *fixe* : html, pdf, web_page, txt...

  Chaque Noeud est identifié de façon unique
  MAIS il n'est pas envisageable d'avoir une gestion GLOBALE des identifiants
  => gestion arborescente (chaque noeud a un ID unique dans son parent)
  => Cela nécessite un système de requête pour rechercher l'id d'un noeud

  Chaque Noeud a une entrée sous forme de file d'attente (en:queue) qui reçoit les messages entrants et
une sortie sous forme de liste de triggers qui déclenchent l'envoi de message(s) sur d'autres
noeuds lorsque certaines conditions sont remplies.

Evénements qui peuvent déclencher un trigger :
 - Réception d'un message (suivant le message), avant ou après traitement du message
 - Fin d'exécution d'une tâche interne (bloquante ou non)
 - Etapes intermédiaires d'un (long) calcul

Trame d'un message :
 - src : id du noeud d'envoi (adresse hiérarchique ?)
 - dst : id du noeud destination (adresse hiérarchique ?)
 - qid : id de la requête
 - Charge utile :


